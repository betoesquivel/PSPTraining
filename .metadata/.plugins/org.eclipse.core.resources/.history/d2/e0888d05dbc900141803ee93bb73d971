package mx.itesm.A01139626.src;

public class AreaUnderTDistribution implements ErrorMessages {
	private double dX;
	private int iDof;
	private double dP;
	
	//&i
	/**
	 * Empty constructor
	 */
	public AreaUnderTDistribution() {
		super();
	}

	//&i
	/**
	 * Constructor with values
	 * @param dX
	 * @param iDof
	 */
	public AreaUnderTDistribution(double dX, int iDof) {
		super();
		this.dX = dX;
		this.iDof = iDof;
	}

	//&i
	/**
	 * @return the dX
	 */
	public double getdX() {
		return dX;
	}

	//&i
	/**
	 * @param dX the dX to set
	 */
	public void setdX(double dX) {
		this.dX = dX;
	}

	//&i
	/**
	 * @return the iDof
	 */
	public int getiDof() {
		return iDof;
	}

	//&i
	/**
	 * @param iDof the iDof to set
	 */
	public void setiDof(int iDof) {
		this.iDof = iDof;
	}

	//&i
	/**
	 * @return the dP
	 */
	public double getdP() {
		return dP;
	}

	//&i
	/**
	 * @param dP the dP to set
	 */
	public void setdP(double dP) {
		this.dP = dP;
	}
	
	//&i
	/**
	 * toString
	 * 
	 * @return the <code>String</code> representation of the object.
	 */
	public String toString() {
		
		String sFormat;
		sFormat = "x    =%.5f\ndof = %d\np    =%.5f";
		return String.format(sFormat, getdX(), getiDof(), getdP());
		
	}
	
	//&i
	/**
	 * 
	 * gamma
	 * 
	 * @param dX of type <code>double</code> the value for which gamma is to be given
	 * @return the value of type <code>double</code> for gamma given the parameter dX
	 */
	public double gamma(double dX) {
		
		if ( dX == 1 ) {
			return 1.0;
		} else if (dX == 0.5) {
			return Math.sqrt(Math.PI);
		} else {
			return (dX - 1) * gamma(dX - 1);
		}
		
	}

	//&i
	/**
	 * 
	 * tStudent
	 * 
	 * @param dX of type <code>double</code> the value for which tStudent is to be given
	 * @return the value of type <code>double</code> for tStudent given the parameter dX
	 */
	public double tStudent(double dX) {
		
		return ( gamma( (iDof + 1) / 2.0 ) / ( Math.pow((iDof*Math.PI),0.5) * gamma( iDof / 2.0 ) ) ) * Math.pow( ( 1 + (Math.pow(dX, 2) / iDof) ), ( (iDof + 1)/(-2) ) );
		
	}
	
	//&i
	/**
	 * 
	 * simpson
	 * 
	 * calculates a simpson iteration of a simpson integration
	 * 
	 * @param dX of type <code>double</code> the value for which simpson iteration is to be given
	 * @param dW of type <code>double</code> width of each simpson segment
	 * @param iNumSeg of type <code>int</code>
	 * 
	 * @return the value of type <code>double</code> for gamma given the parameter dX
	 */
	public double simpson(double dX) {
		
		if ( dX == 1 ) {
			return 1.0;
		} else if (dX == 0.5) {
			return Math.sqrt(Math.PI);
		} else {
			return (dX - 1) * gamma(dX - 1);
		}
		
	}
	//&i
	/**
	 * main
	 * 
	 * Contains the main logic of the program.
	 * 
	 * @param args
	 */
	public static void main(String[] args) {
		
		
		
	}

}
